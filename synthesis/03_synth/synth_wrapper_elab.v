
// Generated by Cadence Genus(TM) Synthesis Solution GENUS15.20 - 15.20-p004_1
// Generated on: May 25 2025 20:37:34

// Verification Directory fv/synth_wrapper 

module fulladder(X, Y, Ci, S, Co);
  input X, Y, Ci;
  output S, Co;
  wire X, Y, Ci;
  wire S, Co;
  wire w1, w2, w3;
  xor G1 (w1, X, Y);
  xor G2 (S, w1, Ci);
  and G3 (w2, w1, Ci);
  and G4 (w3, X, Y);
  or G5 (Co, w2, w3);
endmodule

module ripple_adder(X, Y, S, Co, Cin);
  input [3:0] X, Y;
  input Cin;
  output [3:0] S;
  output Co;
  wire [3:0] X, Y;
  wire Cin;
  wire [3:0] S;
  wire Co;
  wire w1, w2, w3;
  fulladder u1(X[0], Y[0], Cin, S[0], w1);
  fulladder u2(X[1], Y[1], w1, S[1], w2);
  fulladder u3(X[2], Y[2], w2, S[2], w3);
  fulladder u4(X[3], Y[3], w3, S[3], Co);
endmodule

module bmux(ctl, in_0, in_1, z);
  input ctl;
  input [3:0] in_0, in_1;
  output [3:0] z;
  wire ctl;
  wire [3:0] in_0, in_1;
  wire [3:0] z;
  CDN_bmux2 g1(.sel0 (ctl), .data0 (in_0[3]), .data1 (in_1[3]), .z
       (z[3]));
  CDN_bmux2 g2(.sel0 (ctl), .data0 (in_0[2]), .data1 (in_1[2]), .z
       (z[2]));
  CDN_bmux2 g3(.sel0 (ctl), .data0 (in_0[1]), .data1 (in_1[1]), .z
       (z[1]));
  CDN_bmux2 g4(.sel0 (ctl), .data0 (in_0[0]), .data1 (in_1[0]), .z
       (z[0]));
endmodule

module counter(clk, rst_n, sel, out);
  input clk, rst_n, sel;
  output [3:0] out;
  wire clk, rst_n, sel;
  wire [3:0] out;
  wire [3:0] temp;
  wire [3:0] next_out;
  wire Cout, UNCONNECTED, UNCONNECTED0, UNCONNECTED1, UNCONNECTED2,
       n_14, n_20;
  ripple_adder u_add(.X (out), .Y (temp), .S (next_out), .Co (Cout),
       .Cin (n_20));
  bmux mux_11_21(.ctl (sel), .in_0 (4'b1110), .in_1 (4'b0001), .z
       (temp));
  bmux mux_out_22_7(.ctl (n_14), .in_0 (next_out), .in_1 (4'b0000), .z
       ({UNCONNECTED2, UNCONNECTED1, UNCONNECTED0, UNCONNECTED}));
  not g1 (n_20, sel);
  not g6 (n_14, rst_n);
  CDN_flop \out_reg[0] (.clk (clk), .d (next_out[0]), .sena (1'b1),
       .aclr (n_14), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (out[0]));
  CDN_flop \out_reg[1] (.clk (clk), .d (next_out[1]), .sena (1'b1),
       .aclr (n_14), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (out[1]));
  CDN_flop \out_reg[2] (.clk (clk), .d (next_out[2]), .sena (1'b1),
       .aclr (n_14), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (out[2]));
  CDN_flop \out_reg[3] (.clk (clk), .d (next_out[3]), .sena (1'b1),
       .aclr (n_14), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (out[3]));
endmodule

module synth_wrapper(clk, rst_n, sel, out);
  input clk, rst_n, sel;
  output [3:0] out;
  wire clk, rst_n, sel;
  wire [3:0] out;
  wire UNCONNECTED3, UNCONNECTED4, UNCONNECTED5, UNCONNECTED6, n_5,
       \out_reg[0]_12 , \out_reg[1]_13 , \out_reg[2]_14 ;
  wire \out_reg[3]_15 ;
  counter u1(.clk (clk), .rst_n (rst_n), .sel (sel), .out
       ({\out_reg[3]_15 , \out_reg[2]_14 , \out_reg[1]_13 ,
       \out_reg[0]_12 }));
  bmux mux_out_13_8(.ctl (n_5), .in_0 ({\out_reg[3]_15 , \out_reg[2]_14
       , \out_reg[1]_13 , \out_reg[0]_12 }), .in_1 (4'b0000), .z
       ({UNCONNECTED6, UNCONNECTED5, UNCONNECTED4, UNCONNECTED3}));
  not g1 (n_5, rst_n);
  CDN_flop \out_reg[0] (.clk (clk), .d (\out_reg[0]_12 ), .sena (1'b1),
       .aclr (n_5), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (out[0]));
  CDN_flop \out_reg[1] (.clk (clk), .d (\out_reg[1]_13 ), .sena (1'b1),
       .aclr (n_5), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (out[1]));
  CDN_flop \out_reg[2] (.clk (clk), .d (\out_reg[2]_14 ), .sena (1'b1),
       .aclr (n_5), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (out[2]));
  CDN_flop \out_reg[3] (.clk (clk), .d (\out_reg[3]_15 ), .sena (1'b1),
       .aclr (n_5), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (out[3]));
endmodule

`ifdef RC_CDN_GENERIC_GATE
`else
module CDN_flop(clk, d, sena, aclr, apre, srl, srd, q);
  input clk, d, sena, aclr, apre, srl, srd;
  output q;
  wire clk, d, sena, aclr, apre, srl, srd;
  wire q;
  reg  qi;
  assign #1 q = qi;
  always 
    @(posedge clk or posedge apre or posedge aclr) 
      if (aclr) 
        qi <= 0;
      else if (apre) 
          qi <= 1;
        else if (srl) 
            qi <= srd;
          else begin
            if (sena) 
              qi <= d;
          end
  initial 
    qi <= 1'b0;
endmodule
`endif
`ifdef RC_CDN_GENERIC_GATE
`else
`ifdef ONE_HOT_MUX
module CDN_bmux2(sel0, data0, data1, z);
  input sel0, data0, data1;
  output z;
  wire sel0, data0, data1;
  reg  z;
  always 
    @(sel0 or data0 or data1) 
      case ({sel0})
       1'b0: z = data0;
       1'b1: z = data1;
      endcase
endmodule
`else
module CDN_bmux2(sel0, data0, data1, z);
  input sel0, data0, data1;
  output z;
  wire sel0, data0, data1;
  wire z;
  wire inv_sel0, w_0, w_1;
  not i_0 (inv_sel0, sel0);
  and a_0 (w_0, inv_sel0, data0);
  and a_1 (w_1, sel0, data1);
  or org (z, w_0, w_1);
endmodule
`endif // ONE_HOT_MUX
`endif
